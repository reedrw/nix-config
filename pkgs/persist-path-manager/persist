#!/usr/bin/env nix-shell
#! nix-shell -i bash -p bat eza fzf jq
# vim: filetype=sh

set -e

configJson="$HOME/.config/persist-path-manager/config.json"
configJson=${PPM_CONFIG:-"$configJson"}

# Formatting/color variables
underline=$(tput smul)

bgWhite=$(tput setab 7)

red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
purple=$(tput setaf 5)
cyan=$(tput setaf 6)
grey=$(tput setaf 8)
black=$(tput setaf 0)
reset=$(tput sgr0)
bold=$(tput bold)

# Check if stdout is a terminal, if so, use bat, otherwise use cat
if [[ -t 1 ]]; then
  catCommand="bat -f --theme=base16 --style='changes,grid,snip,numbers' --paging=never --terminal-width=77"
else
  catCommand="catIndent"
  # Clear all colors and formatting
  underline=''
  bgWhite=''
  red=''
  green=''
  yellow=''
  blue=''
  purple=''
  cyan=''
  grey=''
  black=''
  reset=''
  bold=''
fi

main(){
  parseConfig
  # If there are no args, show help and exit
  if [[ "$#" == '0' ]]; then
    show_help
  fi

  case $1 in
    -h|--help)
      show_help
      ;;
    -l|--list)
      list
      ;;
    -v|--verbose)
      set -x
      export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
      shift
      main "$@"
      ;;
    -r|--remove)
      shift;
      remove "$@"
      ;;
    -c|--config)
      cat "$configJson"
      ;;
    *)
      add "$@"
      ;;
  esac
}

# Indent output of cat, used when stdout is not a terminal
# to keep the nix config example aligned with the rest of the text
catIndent(){
  echo
  cat "$@" | sed -e 's/^/  /'
}

show_help() {
  fileName="$(basename "$0")"
  echo "Usage: ${bold}$fileName${reset} [${bgWhite}${black}OPTIONS${reset}] [${underline}PATH${reset}]

${green}${bold}Options:${reset}
  ${yellow}-r, --remove${reset}     Remove the specified path from persistence.
  ${yellow}-l, --list${reset}       List all persistent files and directories.
  ${yellow}-v, --verbose${reset}    Show verbose output for debugging purposes.
  ${yellow}-c, --config${reset}     Show the current configuration.
  ${yellow}-h, --help${reset}       Show this help message and exit.

${green}${bold}Examples:${reset}
  ${bold}$fileName /path/to/directory${reset}       Add a directory to persistence
  ${bold}$fileName -r /path/to/file.txt${reset}     Remove a file from persistence
  ${bold}$fileName -r${reset}                       Select a path to remove from persistence

${green}${bold}Description:${reset}
  This script for NixOS systems with ephemeral root allows you to manage
  persistent files and directories. When given a path as an argument, it
  will be copied to the '/var/persist' directory, added to the 'persist.json'
  file, and (if enabled) a snapshot will be created using the 'snapper' tool.

  Nix can then parse the 'persist.json' file using the 'builtins.fromJSON'
  function to mount the specified paths on system activation.
  For example:"
  eval "$catCommand" << EOF
${grey}# persist.nix${reset}
{ ${red}config${reset}, ${red}pkgs${reset}, ... }:

${purple}let${reset}
  ${red}json${reset} = (${cyan}builtins.fromJSON${reset} (${cyan}builtins.readFile${blue} ./persist.json${reset}));
${purple}in${reset}
{
  environment.persistence.${red}"${green}/var/persist${red}"${reset} = {
    ${red}files${reset} = json.files;
    ${red}directories${reset} = json.directories;
  };
}
EOF
  echo
  exit 0
}


parseConfig(){
  local tmpJson
  tmpJson="$(mktemp)"

  if ! [[ -f "$configJson" ]]; then
    mkdir -p "$(dirname "$configJson")"
    jq > "$tmpJson" << EOF
      {
        "activateCommand": "",
        "persistJson": "$(dirname "$configJson")/persist.json",
        "persistDir": "/var/persist",
        "prevDir": "/var/prev",
        "snapper": {
          "enable": false,
          "config": "persist"
        }
      }
EOF
  cat "$tmpJson" > "$configJson"
  rm "$tmpJson"
  fi
  activateCommand="$(jq -r '.activateCommand' "$configJson")"
  persistJson="$(jq -r '.persistJson' "$configJson")"
  persistDir="$(jq -r '.persistDir' "$configJson")"
  prevDir="$(jq -r '.prevDir' "$configJson")"
  useSnapper="$(jq -r '.snapper.enable' "$configJson")"
  snapperConfig="$(jq -r '.snapper.config' "$configJson")"

  # Create persist.json if it doesn't exist
  ! [[ -f "$persistJson" ]] &&
    echo '{ "files": [], "directories": [] }' | jq > "$persistJson"

  # Check if persistDir is a directory
  if ! [[ -d "$persistDir" ]]; then
    echo "The specified perist directory ($persistDir) is not a directory or does not exist."
    exit 204
  fi

  # Check if activateCommand is set
  if [[ -z "$activateCommand" ]]; then
    echo "Make sure you set activateCommand in $configJson"
    echo
    echo "Ex:"
    jq -r ".activateCommand |= \"sh -c 'sudo nixos-rebuild switch && home-manager switch'\"" "$configJson"
    exit 7
  fi
}

list(){
  files=$(jq -r '.files[]' "$persistJson")
  directories=$(jq -r '.directories[]' "$persistJson")

  if [[ -n "$files" ]]; then
    echo "${bold}Persistent Files:${reset}"
    printf '%s' "$blue"
    echo "$files" | while read -r file; do
      echo "$file"
    done
    printf '%s' "$reset"
    echo
  fi

  if [[ -n "$directories" ]]; then
    echo "${bold}Persistent Directories:${reset}"
    printf '%s' "$green"
    echo "$directories" | while read -r directory; do
      echo "$directory"
    done
    printf '%s' "$reset"
  fi
}

parseFileArgs(){
  # This function sets the following variables:
  #  - fileArg (the absolute path of the file to be persisted, relative to /) (e.g. /home/user/file.txt)
  #  - fileArgOrigPath (the original path of the file to be persisted.) (e.g. /prev/30/home/user/file.txt)
  #  - newLoc (the new location of the file within persistDir) (e.g. /var/persist/home/user/file.txt)
  #  - isDir (whether fileArgOrigPath is a directory or not)

  local removalSubstring
  removalSubstring=""
  # Resolve the absolute path of the input argument
  fileArg="$(realpath "$1")"

  # Store the original path for later use
  fileArgOrigPath="$fileArg"

  # Determine the new location for the path within "/persist" if needed
  # This step allows the user to persist files directly from their file paths
  # within snapshots or previous boots, while still maintaining the correct
  # relative directory structure within "/persist".
  if [[ "$fileArg" == "$prevDir/"* ]]; then
    removalSubstring="s|$prevDir/[0-9]\+||g"
    fileArg="$(echo "$fileArg" | sed "$removalSubstring")"
    newLoc="$(dirname "$persistDir$fileArg")"
  elif [[ "$fileArg" == "$persistDir/.snapshots/"* ]]; then
    removalSubstring="s|$persistDir/.snapshots/.*/snapshot||g"
    fileArg="$(echo "$fileArg" | sed "$removalSubstring")"
    newLoc="$(dirname "$persistDir$fileArg")"
  elif [[ "$fileArg" == "$persistDir/"* ]]; then
    removalSubstring="s|$persistDir||g"
    # Paths already within "/persist" don't need newLoc handling
    fileArg="$(echo "$fileArg" | sed "$removalSubstring")"
    newLoc=''
  else
    # Handle other paths by copying to "/persist/<directory>"
    newLoc="$persistDir$(dirname "$fileArg")"
  fi

  # Check if the path exists
  if ! pathExists "$fileArgOrigPath"; then
    echo "Path $1 does not exist."
    return 53
  fi

  # Check if the path is a directory
  if [[ -d "$fileArgOrigPath" ]]; then
    isDir="yes"
  else
    isDir="no"
  fi
}

pathExists(){ [[ -f "$1" ]] || [[ -d "$1" ]] || [[ -L "$1" ]]; }

add() {
  # TODO: Add support for adding multiple paths at once
  local tmpJson
  tmpJson="$(mktemp)"

  parseFileArgs "$@"

  echo "Adding path ${green}$fileArg${reset} to persistence."

  # Update the JSON data based on the path type (file or directory)
  if [[ "$isDir" == "yes" ]]; then
    # Add the directory path to the JSON data and ensure uniqueness
    jq -r ".directories[.directories | length] |= . + \"$fileArg\"" "$persistJson" \
      | jq -r '.directories |= if . then sort else empty end' \
      | jq '.directories |= unique' > "$tmpJson"
  else
    # Add the file path to the JSON data and ensure uniqueness
    jq -r ".files[.files | length] |= . + \"$fileArg\"" "$persistJson" \
      | jq -r '.files |= if . then sort else empty end' \
      | jq '.files |= unique' > "$tmpJson"
  fi

  # Update the main 'persist.json' file with the updated JSON data
  oldJson="$(cat "$persistJson")"
  cat "$tmpJson" > "$persistJson"
  rm "$tmpJson"

  if [[ -n "$newLoc" ]]; then
    # Create the necessary directories in the new location
    mkdir -p "$newLoc"

    # Copy the path to the new location and create a snapshot if enabled
    if [[ "$useSnapper" == "true" ]]; then
      snapper -c "$snapperConfig" create --command "
        cp -a -rp --reflink '$fileArgOrigPath' '$newLoc'
      " -d "persist $fileArg"
    else
      cp -a -rp --reflink "$fileArgOrigPath" "$newLoc"
    fi

    moveBack=""
    if pathExists "$fileArg"; then
      # Rename the original path by appending ".bak" to avoid conflicts
      moveBack="yes"
      mv "$fileArg" "$fileArg.bak"
    fi
  fi

  # Activate the NixOS generations and handle activation failures
  if eval "$activateCommand" || mountpoint "$fileArg" > /dev/null || pathExists "$fileArg"; then
    [[ -z "$moveBack" ]] || rm -rf "$fileArg.bak"
  else
    [[ -z "$moveBack" ]] || mv "$fileArg.bak" "$fileArg"
    echo "$oldJson" > "$persistJson"
  fi
}

remove(){
  local tmpJson
  tmpJson="$(mktemp)"

  # If no options are provided, use fzf to choose path to remove from persistJson
  if [[ -z "$*" ]]; then
    # Check if the persistJson file is empty
    if [[ ! -s "$persistJson" ]]; then
      echo "No paths are currently persisted."
      exit 0
    fi

    # Set the fzf arguments
    fzfArgs=(
      "--height=70%"
      "--layout=reverse"
      "--info=inline"
      "--color=16"
      "--prompt=Select a path to remove from persistence: "
    )

    # Use fzf to select a path to remove from the persistJson file
    fileArg="$(jq -r '.directories[] + "\n" + .files[]' "$persistJson" \
      | sort \
      | uniq \
      | fzf "${fzfArgs[@]}" --preview "
        if [[ -f {} ]]; then
          bat -f --theme=base16 --style='changes,grid,snip,numbers' --paging=never {};
        else
          eza -lah -s type --color=always {};
        fi
      "
    )"

    # Check if the user cancelled the fzf selection
    if [[ -z "$fileArg" ]]; then
      echo "No path was selected."
      exit 0
    fi

    parseFileArgs "$fileArg"
  else
    # Parse the provided file arguments and determine if they are directories or files
    parseFileArgs "$@"
  fi

  # Check if the provided path exists in the persist.json file
  # by searching for it in the appropriate JSON array (directories or files).
  # If the path is not found, exit with an error code.
  if [[ "$isDir" == "yes" ]]; then
    exists=$(jq -r ".directories[] | select(. == \"$fileArg\")" "$persistJson")
  else
    exists=$(jq -r ".files[] | select(. == \"$fileArg\")" "$persistJson")
  fi

  if [[ -z "$exists" ]]; then
    echo "Provided path is not present in persist.json."
    exit 52
  fi

  echo "Removing ${red}$fileArg${reset} from persistence."

  # Remove the path from the appropriate JSON array (directories or files).
  # This is done by using the 'jq' command to delete the matching entry from the array.
  # The resulting JSON data is saved in a temporary file.
  if [[ -d "$fileArg" ]]; then
    jq -r ".directories |= del(.[index(\"$fileArg\")])" "$persistJson" > "$tmpJson"
  else
    jq -r ".files |= del(.[index(\"$fileArg\")])" "$persistJson" > "$tmpJson"
  fi
  oldJson="$(cat "$persistJson")"
  cat "$tmpJson" > "$persistJson"
  rm "$tmpJson"

  # Determine the path within the persisted directory ("/persist") where the item was located.
  # This is used later to prompt the user to delete the corresponding directory or file.
  persistLoc="$persistDir$(dirname "$fileArg")"

  # If the NixOS generations activation command succeeds and the item is a directory,
  # remove the directory from the original location. As it was perviously a mountpoint,
  # and should now be empty. Make sure it's empty before removing it.
  if eval "$activateCommand" && [[ -d "$fileArg" ]] && [[ -z "$(ls -A "$fileArg")" ]]; then
    rm -rf "$fileArg"
  fi

  # Prompt the user to confirm the deletion of the item from the persisted directory ("/persist").
  # Depending on the user's choice, the item will be deleted from the persisted directory.
  read -rp "Delete $persistLoc/$(basename "$fileArg")? [y/N]: " yn
  case "$yn" in
    [Yy]*)
      # If the 'useSnapper' option is set to true, create a new snapshot and then delete the item.
      # Otherwise, directly delete the item from the persisted directory.
      if [[ "$useSnapper" == "true" ]]; then
        snapper -c persist create --command "
          rm -rf ${persistLoc:?}/$(basename "${fileArg:?}")
        " -d "remove $fileArg"
      else
        rm -rf "${persistLoc:?}/$(basename "${fileArg:?}")"
      fi
    ;;
    *) exit 0;; # If the user chooses not to delete, exit the function without performing any deletion.
  esac
}

main "$@"
