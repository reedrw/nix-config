#! /usr/bin/env nix-shell
#! nix-shell -i bash -p fzf gron jq
# vim: filetype=sh

set -eo pipefail

# Pin a package to a specific version, using devbox's search API
# Usage: pin.sh <package-name> <version>

pinnedJson="$HOME/files/nix-config/pkgs/pin/pinned.json"

api="https://search.devbox.sh/v1/search?q="

fzfArgs=(
  "--height=70%"
  "--layout=reverse"
  "--info=inline"
  "--color=16"
)

helpMessage(){
  local green="\033[0;32m"
  local yellow="\033[0;33m"
  local bold="\033[1m"
  local nc="\033[0m"

  echo -e "Usage: ${bold}$(basename "$0") ${yellow}[--remove|--list|--help]${nc} ${bold}<package>${nc} ${bold}<version>${nc}"
  echo -e "  ${green}-d, --default${nc}     Set the default version for a package"
  echo -e "  ${green}-r, --remove${nc}      Remove a package from pinned.json"
  echo -e "  ${green}-n, --note${nc}        Add a note to a pinned package"
  echo -e "  ${green}-l, --list${nc}        List all pinned packages"
  echo -e "  ${green}-h, --help${nc}        Show this help message"
  echo -e "  ${green}-v, --verbose${nc}     Show verbose output"
  exit 0
}

checkPinned(){
  local package="$1"
  local version="$2"

  if [ "$(jq -r ".[\"${package}\"] | has(\"$version\")" "$pinnedJson" 2> /dev/null)" = "true" ]; then
    return 0
  else
    return 1
  fi
}

queryApi(){
  apiSearchResponse="$(curl -s "$api$package")"
  packageJson="$(echo "$apiSearchResponse" | jq -r ".packages[] | select(.name == \"$package\")")"
}

remove(){
  local package="$1"
  local version="$2"
  local default


  echo "Removing $package $version from pinned.json"

  default="$(jq -r ".[\"$package\"].default" "$pinnedJson")"

  tmpJson="$(mktemp)"
  if [ "$version" = "$default" ]; then
    noDefault "$package" > "$tmpJson"
    cat "$tmpJson" > "$pinnedJson"
  fi

  gron "$pinnedJson" \
    | grep -Ev "\\[?\"?${package}\"?\]?\\[\"$version\"\\]" \
    | gron --ungron \
    | jq . > "$tmpJson"

  if [[ "$(gron "$tmpJson" | grep -cE "\\[?\"?${package}\"?\]?")" -eq 1 ]]; then
    gron "$pinnedJson" | grep -Ev "\\[?\"?${package}\"?\]?" | gron --ungron | jq . > "$tmpJson"
  fi
  cat "$tmpJson" > "$pinnedJson"
  rm "$tmpJson"
}

list(){
  # output example:
  #
  # $ pin --list
  # hyfetch 1.4.1
  # (grey) Note: waiting until bug is fixed <issue link>
  # hyfetch 1.4.11 (default)
  # hyfetch 1.4.7
  # hyfetch 1.4.9
  # qbittorrent-nox 4.6.7 (default)
  # qbittorrent-nox 5.0.0
  # yt-dlp 2024.9.27

  local package
  local version
  local default
  local note
  local nameStr

  local grey
  local green
  local blue
  local yellow
  local purple
  local nc

  grey="$(tput setaf 8)"
  green="$(tput setaf 2)"
  blue="$(tput setaf 4)"
  yellow="$(tput setaf 3)"
  purple="$(tput setaf 5)"
  nc="$(tput sgr0)"

  items="$(jq -r 'to_entries[] | .key + " " + (.value | keys_unsorted | .[])' "$pinnedJson")"
  echo "$items" | while read -r item; do
    package="$(echo "$item" | cut -d ' ' -f 1)"
    version="$(echo "$item" | cut -d ' ' -f 2)"
    default="$(jq -r ".[\"$package\"].default" "$pinnedJson")"
    if [ "$version" = "$default" ]; then
      nameStr="$package ${blue}$version${nc} (${yellow}default${nc})"
    elif [ "$version" = "default" ]; then
      continue
    else
      nameStr="$package ${blue}$version${nc}"
    fi
    # if note exists for version, print it
    note="$(jq -r ".[\"$package\"][\"$version\"].note" "$pinnedJson" || return 0)"
    if [ -n "$note" ] && [ "$note" != "null" ]; then
      echo -e "${grey}Note: $note${nc}"
    fi
    echo "$nameStr"
  done
}

listAllPackages(){
  nix eval --impure --raw --expr '
    let
      flake = builtins.getFlake "nixpkgs";
    in builtins.concatStringsSep "\n" (builtins.attrNames flake.legacyPackages.x86_64-linux)
  ' 2> /dev/null
}

getAvailableVersions(){
  echo "$packageJson" | jq -r ".versions | map(.version) | .[]"
}

noDefault(){
  # @param $1 package name
  local package="$1"

  jq -r "del(.[\"$package\"][\"default\"])" "$pinnedJson"
}

setDefault(){
  # @param $1 package name
  # @param $2 version
  local package="$1"
  local version="$2"
  local tmpJson

  tmpJson="$(mktemp)"
  noDefault "$package" | gron > "$tmpJson"

  if [[ "$version" == "null" ]]; then
    noDefault "$package" > "$tmpJson"
    cat "$tmpJson" > "$pinnedJson"
    rm "$tmpJson"
    return 0
  fi

  # make sure the package and requested version are pinned
  if checkPinned "$package" "$version"; then
    echo "json[\"$package\"][\"default\"] = \"$version\";" >> "$tmpJson"
    gron --ungron < "$tmpJson" | jq . > "$pinnedJson"
  else
    main "$package" "$version"
    setDefault "$package" "$version"
  fi
  rm "$tmpJson"
}

setNote(){
  # @param $1 package name
  # @param $2 version
  # @param $3 note

  local package="$1"
  local version="$2"
  local note="$3"
  local tmpJson

  if ! checkPinned "$package" "$version"; then
    echo "Package $package $version is not pinned"
    exit 1
  fi

  tmpJson="$(mktemp)"

  if [[ "$note" == "null" ]]; then
    jq -r "del(.[\"$package\"][\"$version\"].note)" "$pinnedJson" > "$tmpJson"
  else
    jq -r ".[\"$package\"][\"$version\"].note = \"$note\"" "$pinnedJson" > "$tmpJson"
  fi

  cat "$tmpJson" > "$pinnedJson"
  rm "$tmpJson"
}

main() {
  local purple="\033[0;35m"
  local green="\033[0;32m"
  local blue="\033[0;34m"
  local bold="\033[1m"
  local nc="\033[0m"
  local tmpJson

  package="${1:-}"
  version="${2:-}"
  rev="${3:-}"

  case "${1:-}" in
    --remove|-r)
      shift
      # use fzf to select a package to remove
      if [ $# -ne 2 ]; then
        toRemove="$(list | fzf "${fzfArgs[@]}" --prompt="Select a package to remove: ")"
        if [ -z "$toRemove" ]; then
          exit 0
        fi
        # shellcheck disable=SC2086
        set -- $toRemove
        remove "$1" "$2"
        exit 0
      fi
      # remove package-version pairs until we have no more arguments
      while [ $# -ge 2 ]; do
        remove "$1" "$2"
        shift 2
      done
      exit 0
      ;;
    --list|-l)
      list
      exit 0
      ;;
    --listRaw)
      if [ $# -ge 2 ]; then
        package="$2"
        shift 2
        main --listRaw | grep "^$package " | cut -d ' ' -f 2
        exit 0
      fi
      shift
      jq -r 'to_entries[] | .key + " " + (.value | keys_unsorted | .[])' <(jq 'del(.[]["default"])' "$pinnedJson")
      exit 0
      ;;
    --listAllPackages)
      listAllPackages
      exit 0
      ;;
    --listVersions)
      package="$2"
      shift 2
      queryApi
      getAvailableVersions
      exit 0
      ;;
    -v|--verbose)
      set -x
      export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
      shift
      main "$@" && exit 0
      ;;
    --default|-d)
      shift
      setDefault "$1" "$2"
      exit 0
      ;;
    --note|-n)
      shift
      setNote "$1" "$2" "$3"
      exit 0
      ;;
    --help|-h)
      helpMessage
      ;;
  esac

  # if no arguments are given, ask for what to pin
  if [ -z "$package" ]; then
    package="$(nix eval --impure --raw --expr '
      let
        flake = builtins.getFlake "nixpkgs";
      in builtins.concatStringsSep "\n" (builtins.attrNames flake.legacyPackages.x86_64-linux)
    ' 2> /dev/null | fzf "${fzfArgs[@]}" --prompt="Select a package to pin: ")"
  fi

  # if no version is given, show available versions
  # and ask for which one to pin
  if [ -z "$version" ]; then
    queryApi
    availableVersions=( "$(getAvailableVersions)" )
    version="$(echo "${availableVersions[@]}" | tr ' ' '\n' | fzf "${fzfArgs[@]}" --prompt="Select a version to pin: ")"
  fi

  if [ -z "$package" ] || [ -z "$version" ]; then
    echo "Package and version must be specified"
    exit 1
  fi

  # if package and version is already pinned, exit
  if checkPinned "$package" "$version"; then
    echo "Package $package is already pinned to version $version"
    exit 0
  fi

  system="$(nix eval --raw nixpkgs\#system)"

  # find the commit hash for the given version
  if [ -z "$rev" ]; then
    # if we don't have an api response yet, query the api
    [ -z "${apiSearchResponse:-}" ] && queryApi
    # devbox often only says package is for macOS, but we can still get the commit hash
    #packageInfo="$(echo "$packageJson" | jq -r ".versions[] | select(.version == \"$version\") | .systems[\"$system\"]")"
    systems=(
      "x86_64-linux" "x86_64-darwin"
      "aarch64-linux" "aarch64-darwin"
      "armv7l-linux" "armv6l-linux"
      "i686-linux"
      "powerpc64le-linux"
      "riscv64-linux"
    )
    for system in "${systems[@]}"; do
      packageInfo="$(echo "$packageJson" | jq -r ".versions[] | select(.version == \"$version\") | .systems[\"$system\"]")"
      rev="$(echo "$packageInfo" | jq -r ".commit_hash")"
      if [ -n "$packageInfo" ] && [[ "$rev" != "null" ]]; then
        break
      fi
    done
  fi

  # if we have a third argument, check whether it's a commit hash
  # based on length of the string
  if [[ "${#rev}" != "40" ]]; then
    # if it's not a commit hash, assume it's a nixpkgs PR number
    # and query the GitHub API to get the commit hash
    rev="$(curl -s "https://api.github.com/repos/NixOS/nixpkgs/pulls/$3" | jq -r '.head.sha')"
  fi
  sha256="$(nix-prefetch-url https://github.com/nixos/nixpkgs/archive/"$rev".tar.gz --unpack --type sha256)"

  # write to pinned.json
  if [ ! -f "$pinnedJson" ]; then
    echo "{}" > "$pinnedJson"
  fi

  tmpJson="$(mktemp)"

  # create a new entry in pinned.json
  (
    gron "$pinnedJson"
    echo "json[\"$package\"][\"$version\"].rev = \"$rev\";"
    echo "json[\"$package\"][\"$version\"].sha256 = \"$sha256\";"
  ) | gron --ungron | jq . > "$tmpJson"

  cat "$tmpJson" > "$pinnedJson"
  rm "$tmpJson"

  echo -e "Pinned ${blue}${bold}$package${nc} to version ${green}$version${nc} at attribute ${purple}${bold}pkgs.pinned.$package.v$(echo "$version" | tr '.' '_')${nc}"
}

main "$@"
