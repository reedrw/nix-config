#! /usr/bin/env nix-shell
#! nix-shell -i bash -p nix jq
# vim: filetype=sh

gc() {
  if type -P lorri &> /dev/null; then
    lorri gc rm
  fi

  nix profile list --json \
    | jq -r '.elements | to_entries[] | "\(.key)"' \
    | while read -r profile; do
    if [[ "$profile" != "home-manager-path" ]]; then
      nix profile remove "$profile"

      if test -f "$ZDOTDIR/.zcompdump"; then
        rm "$ZDOTDIR/.zcompdump"
      fi
    fi
  done

  nix-collect-garbage "$@"
}

# Find the NixOS generations which were built from
# a dirty git tree. My configs link a version file to
# /etc/nixos/tree-version, which ends with either a
# git commit hash, or "_dirty".
findDirty() {
  local dirty;
  dirty=();

  if [[ ${1:-} == "--dry-run" ]]; then
    dry_run=1
  fi

  # shellcheck disable=SC2010
  [[ $USER == "root" ]] && for gen in $(ls -rt -d -1 "/nix/var/nix/profiles"/* \
    | grep -E "system-" \
    | grep -v "$(readlink /nix/var/nix/profiles/system)"
  ); do
    local versionFile;
    versionFile="$gen/etc/nixos/tree-version"
    if [[ ! -f "$versionFile" ]]; then
      continue
    else
      local version;
      version=$(cat "$versionFile")
      if [[ "$version" == *"_dirty" ]]; then
        dirty+=("$gen")
      fi
    fi
  done

  # shellcheck disable=SC2010
  for gen in $( ls -rt -d -1 "$HOME/.local/state/nix/profiles"/* 2> /dev/null \
    | grep -E "home-manager-" \
    | grep -v "$(readlink ~/.local/state/nix/profiles/home-manager)"
  ); do
    local versionFile;
    versionFile="$gen/home-files/.local/share/home-manager/tree-version"
    if [[ ! -f "$versionFile" ]]; then
      continue
    else
      local version;
      version=$(cat "$versionFile")
      if [[ "$version" == *"_dirty" ]]; then
        dirty+=("$gen")
      fi
    fi
  done

  for gen in "${dirty[@]}"; do
    echo "Deleting $(basename "$gen")"
    [[ -z ${dry_run:-} ]] && rm "$gen"
  done
}

main() {
  case "${1:-}" in
    -v|--verbose)
      set -x
      shift
      main "$@"
    ;;
    -D|--delete-dirty)
      shift
      findDirty "$@"
    ;;
    *)
      gc "$@"
    ;;
  esac
}

main "$@"
