name: "Build and populate cache"
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  system:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    name: Build system
    strategy:
      matrix:
        cachixName:
          - reedrw
        machines:
          - nixos-desktop
          - nixos-t400
          - nixos-t520

    runs-on: ubuntu-latest
    steps:
    - name: Free disk space
      run: |
        df -h
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Install Nix
      uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Install Cachix
      uses: cachix/cachix-action@v10
      with:
        name: ${{ matrix.cachixName }}
        signingKey: '${{ env.CACHIX_SIGNING_KEY }}'
        pushFilter: (-source$|\.tar\.gz$|\.xpi)

    - name: Checkout repository
      uses: actions/checkout@v2.3.4

    - name: Build system
      run: |
        export NIXPKGS_ALLOW_UNFREE=1
        nix run nixpkgs.nix-build-uncached -c nix-build-uncached -I nixos-hardware="$(jq -r '.["nixos-hardware"].url' ./nix/sources.json)" -I nur="$(jq -r '.["NUR"].url' ./nix/sources.json)" ci.nix -A $machine
      env:
        machine: ${{ matrix.machines }}

  home-manager:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    name: Build home-manager
    strategy:
      matrix:
        cachixName:
          - reedrw
    runs-on: ubuntu-latest
    steps:
    - name: Free disk space
      run: |
        df -h
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Install Nix
      uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Install Cachix
      uses: cachix/cachix-action@v10
      with:
        name: ${{ matrix.cachixName }}
        signingKey: '${{ env.CACHIX_SIGNING_KEY }}'
        pushFilter: (-source$|\.tar\.gz$|\.xpi)

    - name: Checkout repository
      uses: actions/checkout@v2.3.4

    - name: Build home-manager
      run: |
        export NIXPKGS_ALLOW_UNFREE=1
        nix run nixpkgs.nix-build-uncached -c nix-build-uncached ci.nix -A home-manager

  shell:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    name: Build nix-shell
    strategy:
      matrix:
        cachixName:
          - reedrw

    runs-on: ubuntu-latest
    steps:
    - name: Free disk space
      run: |
        df -h
        sudo apt clean
        docker rmi $(docker image ls -aq)
        df -h

    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Install Nix
      uses: cachix/install-nix-action@v13
      with:
        nix_path: nixpkgs=channel:nixos-unstable

    - name: Install Cachix
      uses: cachix/cachix-action@v10
      with:
        name: ${{ matrix.cachixName }}
        signingKey: '${{ env.CACHIX_SIGNING_KEY }}'
        pushFilter: (-source$|\.tar\.gz$|\.xpi)

    - name: Checkout repository
      uses: actions/checkout@v2.3.4

    - name: Build nix-shell
      run: |
        export NIXPKGS_ALLOW_UNFREE=1
        nix-shell -I nixpkgs="$(jq -r '.["nixpkgs"].url' ./nix/sources.json)" shell.nix --run 'exit'

  telegram:
    name: Telegram
    needs: [system, home-manager, shell]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Install Doppler CLI
      uses: dopplerhq/cli-action@v1

    - name: Pass all secrets to next steps
      run: |
        while read -rd $'' line; do echo "$line" >> $GITHUB_ENV; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.key)<<EOF\n\(.value)\nEOF\u0000")[]' )
        while read -r line; do echo "::add-mask::$line"; done < <( doppler secrets download --no-file --format=json | jq "." | grep -v 'DOPPLER_\(CONFIG\|ENVIRONMENT\|PROJECT\)' | jq -r 'to_entries|map("\(.value)\u0000")[]' )
      env:
        DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}

    - name: Get workflow conclusion
      uses: technote-space/workflow-conclusion-action@v2.1

    - name: Send notification
      uses: yanzay/notify-telegram@v0.1.0
      with:
        chat: ${{ env.NOTIFICATION_CHAT_ID }}
        token: ${{ env.NOTIFICATION_TOKEN }}
        status: ${{ env.WORKFLOW_CONCLUSION }}
      if: env.WORKFLOW_CONCLUSION != 'success'
